
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source/auto_examples/plot_fun_with_constraints.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_source_auto_examples_plot_fun_with_constraints.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_auto_examples_plot_fun_with_constraints.py:


Example on geographic plotting and constraint variation
-------------------------------------------------------

In this example we show how to plot wind fields on a map and change
the default constraint coefficients using PyDDA.

This shows how important it is to have the proper intitial state and
constraints when you derive your wind fields. In the first figure,
the sounding was used as the initial state, but for the latter
two examples we use a zero initial state which provides for more
questionable winds at the edges of the Dual Doppler Lobes.

This shows that your initial state and background are key to
providing a physically realistic retrieval. Assuming a zero
background will likely result in false regions of convergence
and divergence that will generate artificial updrafts and downdrafts
at the edges of data coverage.

.. GENERATED FROM PYTHON SOURCE LINES 21-118



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_001.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_002.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_003.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/pydda-docs/lib/python3.11/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_min not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    /usr/share/miniconda3/envs/pydda-docs/lib/python3.11/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_max not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|55964.2227|   0.0000|   0.0091|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 28.290928
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 433.0938|   7.0422|   0.0092|   3.0986|   0.0000|   0.0000|   0.0000|  14.7014
    The gradient of the cost functions is 0.9304552
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|   7.5543|   8.1688|   0.0093|   3.1913|   0.0000|   0.0000|   0.0000|  14.4342
    The gradient of the cost functions is 0.09527954
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|   4.1321|   8.0791|   0.0093|   3.1982|   0.0000|   0.0000|   0.0000|  14.4571
    The gradient of the cost functions is 0.14336012
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|   0.0596|   8.0676|   0.0093|   3.2001|   0.0000|   0.0000|   0.0000|  14.5702
    The gradient of the cost functions is 0.08218288
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50|   0.1758|   7.5954|   0.0093|   3.2102|   0.0000|   0.0000|   0.0000|  14.6147
    The gradient of the cost functions is 0.09824892
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60|   3.0544|   4.3691|   0.0093|   4.1731|   0.0000|   0.0000|   0.0000|  18.6557
    The gradient of the cost functions is 0.19085635
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70|   0.2120|   4.6897|   0.0093|   3.8213|   0.0000|   0.0000|   0.0000|  17.6196
    The gradient of the cost functions is 0.037094764
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         80|   0.1678|   4.5853|   0.0093|   3.8627|   0.0000|   0.0000|   0.0000|  17.8189
    The gradient of the cost functions is 0.045155056
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         90|   0.5275|   3.9846|   0.0093|   4.1231|   0.0000|   0.0000|   0.0000|  19.5749
    The gradient of the cost functions is 0.11628453
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        100|   0.0519|   4.0239|   0.0093|   4.0928|   0.0000|   0.0000|   0.0000|  19.4148
    The gradient of the cost functions is 0.019677749
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        110|   0.0498|   3.9728|   0.0093|   4.1092|   0.0000|   0.0000|   0.0000|  19.6031
    The gradient of the cost functions is 0.04012179
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        120|   0.2664|   3.5551|   0.0093|   4.2000|   0.0000|   0.0000|   0.0000|  21.3789
    The gradient of the cost functions is 0.21858677
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        130|   0.0598|   3.2439|   0.0094|   4.3475|   0.0000|   0.0000|   0.0000|  23.3502
    The gradient of the cost functions is 0.013782491
    Applying low pass filter to wind field...
    Done! Time = 293.1
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|83859.8125|   0.0000|   0.0000|1274.4282|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 31.803404
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 704.4634|   7.6629|   0.0003|1271.5490|   0.0000|   0.0000|   0.0000|  11.8140
    The gradient of the cost functions is 1.1902409
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|  11.1175|   8.6839|   0.0003|1262.6156|   0.0000|   0.0000|   0.0000|  11.5597
    The gradient of the cost functions is 0.33080304
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|  19.4754|   8.5079|   0.0003|1241.5200|   0.0000|   0.0000|   0.0000|  11.3770
    The gradient of the cost functions is 2.2753816
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|  62.3501|   7.4340|   0.0004|1120.5829|   0.0000|   0.0000|   0.0000|  11.9248
    The gradient of the cost functions is 3.5185854
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50| 175.4700|  13.4436|   0.0051| 111.8275|   0.0000|   0.0000|   0.0000|  15.0880
    The gradient of the cost functions is 0.5887735
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60| 169.9729|  27.4714|   0.0096|  11.7312|   0.0000|   0.0000|   0.0000|  19.1073
    The gradient of the cost functions is 0.9122162
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70|   6.8313|  24.8837|   0.0089|  12.7703|   0.0000|   0.0000|   0.0000|  17.9690
    The gradient of the cost functions is 0.29053214
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         80|   5.0923|  22.3917|   0.0090|  11.5872|   0.0000|   0.0000|   0.0000|  17.5588
    The gradient of the cost functions is 0.25398654
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         90|  21.6780|  11.7222|   0.0092|   7.3413|   0.0000|   0.0000|   0.0000|  16.4682
    The gradient of the cost functions is 0.6049799
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        100|   2.0664|  12.5581|   0.0092|   7.6458|   0.0000|   0.0000|   0.0000|  16.4887
    The gradient of the cost functions is 0.14173475
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        110|   2.1252|  11.3306|   0.0092|   7.2155|   0.0000|   0.0000|   0.0000|  16.4568
    The gradient of the cost functions is 0.21625386
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        120|   8.8208|   5.2879|   0.0093|   4.9891|   0.0000|   0.0000|   0.0000|  16.2498
    The gradient of the cost functions is 0.70314664
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        130|   0.5751|   5.0909|   0.0093|   4.8852|   0.0000|   0.0000|   0.0000|  16.2025
    The gradient of the cost functions is 0.04837427
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        140|   0.0371|   5.0346|   0.0093|   4.8496|   0.0000|   0.0000|   0.0000|  16.1679
    The gradient of the cost functions is 0.02695394
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        150|   0.1442|   4.9044|   0.0093|   4.8104|   0.0000|   0.0000|   0.0000|  16.1535
    The gradient of the cost functions is 0.19354059
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        160|   0.3021|   4.4439|   0.0093|   4.6783|   0.0000|   0.0000|   0.0000|  16.1147
    The gradient of the cost functions is 0.08399887
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        170|   0.0857|   3.7469|   0.0094|   4.5192|   0.0000|   0.0000|   0.0000|  17.1091
    Applying low pass filter to wind field...
    Done! Time = 373.9
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|559642.2500|   0.0000|   0.0091|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 43.086613
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10|1749.9241|   7.5786|   0.0093|   3.1306|   0.0000|   0.0000|   0.0000|  14.5110
    The gradient of the cost functions is 4.689668
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|1137.4941|   8.5454|   0.0093|   3.2925|   0.0000|   0.0000|   0.0000|  14.2475
    The gradient of the cost functions is 6.3025713
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|   2.9904|   8.2880|   0.0093|   3.2073|   0.0000|   0.0000|   0.0000|  14.5463
    The gradient of the cost functions is 0.22074585
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|   0.2788|   8.2843|   0.0093|   3.2055|   0.0000|   0.0000|   0.0000|  14.5582
    The gradient of the cost functions is 0.060598478
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50|   0.2472|   8.2683|   0.0093|   3.2056|   0.0000|   0.0000|   0.0000|  14.5609
    The gradient of the cost functions is 0.38104624
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60|   0.1309|   8.2121|   0.0093|   3.2062|   0.0000|   0.0000|   0.0000|  14.5681
    The gradient of the cost functions is 0.09837983
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70|   0.0240|   8.1106|   0.0093|   3.2093|   0.0000|   0.0000|   0.0000|  14.5778
    Applying low pass filter to wind field...
    Done! Time = 163.4






|

.. code-block:: default


    import pydda
    import pyart
    import cartopy.crs as ccrs
    import matplotlib.pyplot as plt


    berr_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR0)
    cpol_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR1)

    # Load our radar data
    sounding = pyart.io.read_arm_sonde(pydda.tests.SOUNDING_PATH)
    berr_grid = pydda.initialization.make_constant_wind_field(berr_grid, (0.0, 0.0, 0.0))

    # Let's provide an initial state from the sounding
    u_back = sounding[1].u_wind
    v_back = sounding[1].v_wind
    z_back = sounding[1].height
    cpol_grid = pydda.initialization.make_wind_field_from_profile(cpol_grid, sounding[1])

    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Co=1.0,
        Cm=64.0,
        frz=5000.0,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.1,
        engine="tensorflow",
    )
    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()

    # Let's see what happens when we use a zero initialization
    # This causes there to be convergence in the cone of silence
    # This is an artifact that we want to avoid!
    # Prescribing winds inside the background through either a constraint
    # Or through the initial state will help mitigate this issue.
    cpol_grid = pydda.initialization.make_constant_wind_field(cpol_grid, (0.0, 0.0, 0.0))
    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Co=1.0,
        Cm=64.0,
        frz=5000.0,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.5,
        engine="tensorflow",
    )

    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()

    # Or, let's make the radar data more important!
    cpol_grid = pydda.initialization.make_wind_field_from_profile(cpol_grid, sounding[1])
    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        Co=10.0,
        Cm=64.0,
        frz=5000.0,
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.1,
        engine="tensorflow",
    )
    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (13 minutes 55.721 seconds)


.. _sphx_glr_download_source_auto_examples_plot_fun_with_constraints.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fun_with_constraints.py <plot_fun_with_constraints.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fun_with_constraints.ipynb <plot_fun_with_constraints.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
