
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source/auto_examples/plot_fun_with_constraints.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_source_auto_examples_plot_fun_with_constraints.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_auto_examples_plot_fun_with_constraints.py:


Example on geographic plotting and constraint variation
-------------------------------------------------------

In this example we show how to plot wind fields on a map and change
the default constraint coefficients using PyDDA.

This shows how important it is to have the proper intitial state and
constraints when you derive your wind fields. In the first figure,
the sounding was used as the initial state, but for the latter
two examples we use a zero initial state which provides for more
questionable winds at the edges of the Dual Doppler Lobes.

This shows that your initial state and background are key to
providing a physically realistic retrieval. Assuming a zero
background will likely result in false regions of convergence
and divergence that will generate artificial updrafts and downdrafts
at the edges of data coverage.

.. GENERATED FROM PYTHON SOURCE LINES 21-118



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_001.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_002.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_003.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/pydda-docs/lib/python3.10/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_min not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    /usr/share/miniconda3/envs/pydda-docs/lib/python3.10/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_max not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|55964.2227|   0.0000|   0.0091|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 28.291126
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 433.0520|  10.8643|   0.0092|   3.0986|   0.0000|   0.0000|   0.0000|  14.6602
    The gradient of the cost functions is 0.9322654
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|   7.5696|  11.9199|   0.0093|   3.1923|   0.0000|   0.0000|   0.0000|  14.3516
    The gradient of the cost functions is 0.108117804
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|   4.4797|  11.2506|   0.0093|   3.2007|   0.0000|   0.0000|   0.0000|  14.2950
    The gradient of the cost functions is 0.24360316
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|   0.2664|  10.8315|   0.0093|   3.2033|   0.0000|   0.0000|   0.0000|  14.3531
    The gradient of the cost functions is 0.258406
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50|   1.1081|   5.6735|   0.0093|   3.2813|   0.0000|   0.0000|   0.0000|  14.6250
    The gradient of the cost functions is 0.061305936
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60|   1.6095|   4.4080|   0.0093|   3.4170|   0.0000|   0.0000|   0.0000|  15.2762
    The gradient of the cost functions is 0.12218659
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70|   0.0535|   4.3390|   0.0093|   3.3971|   0.0000|   0.0000|   0.0000|  15.1830
    The gradient of the cost functions is 0.112230875
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         80|   0.2807|   3.3781|   0.0093|   3.4398|   0.0000|   0.0000|   0.0000|  15.5190
    The gradient of the cost functions is 0.051758513
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         90|   1.0581|   2.4080|   0.0093|   3.6301|   0.0000|   0.0000|   0.0000|  16.3007
    The gradient of the cost functions is 0.10457411
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        100|   0.0483|   2.4010|   0.0093|   3.5898|   0.0000|   0.0000|   0.0000|  16.2115
    The gradient of the cost functions is 0.049456704
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        110|   0.0814|   2.2034|   0.0093|   3.6100|   0.0000|   0.0000|   0.0000|  16.3215
    The gradient of the cost functions is 0.049815755
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        120|   0.6869|   1.5476|   0.0093|   3.7707|   0.0000|   0.0000|   0.0000|  17.0703
    The gradient of the cost functions is 0.10846455
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        130|   0.0268|   1.5556|   0.0093|   3.7333|   0.0000|   0.0000|   0.0000|  16.9280
    The gradient of the cost functions is 0.027292885
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        140|   0.0306|   1.4981|   0.0093|   3.7383|   0.0000|   0.0000|   0.0000|  16.9617
    The gradient of the cost functions is 0.042717613
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        150|   0.4080|   1.1065|   0.0093|   3.7895|   0.0000|   0.0000|   0.0000|  17.2925
    The gradient of the cost functions is 0.10312765
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        160|   0.0236|   1.1075|   0.0093|   3.7809|   0.0000|   0.0000|   0.0000|  17.2615
    The gradient of the cost functions is 0.01871165
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        170|   0.0207|   1.0828|   0.0093|   3.7814|   0.0000|   0.0000|   0.0000|  17.2774
    The gradient of the cost functions is 0.031389352
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        180|   0.2004|   0.8937|   0.0093|   3.7681|   0.0000|   0.0000|   0.0000|  17.8297
    The gradient of the cost functions is 0.114162244
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        190|   0.0271|   0.8746|   0.0093|   3.7660|   0.0000|   0.0000|   0.0000|  18.4548
    The gradient of the cost functions is 0.014707348
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        200|   0.0090|   0.8632|   0.0093|   3.7637|   0.0000|   0.0000|   0.0000|  18.8838
    The gradient of the cost functions is 0.01655056
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        210|   0.0497|   0.8166|   0.0093|   3.7508|   0.0000|   0.0000|   0.0000|  19.4606
    The gradient of the cost functions is 0.1292962
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        220|   0.0408|   0.7467|   0.0093|   3.7189|   0.0000|   0.0000|   0.0000|  20.9271
    The gradient of the cost functions is 0.014018058
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        230|   0.0077|   0.7449|   0.0093|   3.7053|   0.0000|   0.0000|   0.0000|  21.6975
    Applying low pass filter to wind field...
    Done! Time = 313.2
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|83859.8125|   0.0000|   0.0000|1274.4282|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 31.80247
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 704.3429|  11.2237|   0.0003|1271.5498|   0.0000|   0.0000|   0.0000|  11.7762
    The gradient of the cost functions is 1.1914004
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|  11.1114|  12.1835|   0.0003|1262.6161|   0.0000|   0.0000|   0.0000|  11.4604
    The gradient of the cost functions is 0.33650497
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|  20.0218|  11.3132|   0.0003|1241.3234|   0.0000|   0.0000|   0.0000|  11.2256
    The gradient of the cost functions is 2.3322194
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|  64.0980|   7.4645|   0.0004|1118.9155|   0.0000|   0.0000|   0.0000|  11.0131
    The gradient of the cost functions is 3.1738365
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50| 133.2814| 101.4496|   0.0048| 190.4297|   0.0000|   0.0000|   0.0000|  40.1330
    The gradient of the cost functions is 0.575966
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60| 116.2430| 163.7324|   0.0076|  59.7310|   0.0000|   0.0000|   0.0000|  49.3056
    The gradient of the cost functions is 1.4573013
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70|   9.4493| 152.7098|   0.0077|  54.8049|   0.0000|   0.0000|   0.0000|  48.0482
    The gradient of the cost functions is 1.1319462
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         80|  23.7043|  66.5472|   0.0086|  14.8136|   0.0000|   0.0000|   0.0000|  36.1306
    The gradient of the cost functions is 1.6997486
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         90|   5.6146|  27.0551|   0.0091|   7.3213|   0.0000|   0.0000|   0.0000|  24.3880
    The gradient of the cost functions is 0.19911101
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        100|   0.4343|  24.8763|   0.0090|   7.3544|   0.0000|   0.0000|   0.0000|  23.9773
    The gradient of the cost functions is 0.20724337
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        110|   9.3379|  13.8839|   0.0086|   8.3275|   0.0000|   0.0000|   0.0000|  22.6053
    The gradient of the cost functions is 1.2827213
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        120|   2.0562|   7.7675|   0.0084|   9.2695|   0.0000|   0.0000|   0.0000|  20.3768
    The gradient of the cost functions is 0.10957267
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        130|   0.2903|   6.4048|   0.0083|   9.6173|   0.0000|   0.0000|   0.0000|  19.3785
    The gradient of the cost functions is 0.08271687
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        140|   1.2587|   5.3632|   0.0083|   9.1258|   0.0000|   0.0000|   0.0000|  18.9749
    The gradient of the cost functions is 0.5516492
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        150|   1.6371|   3.2382|   0.0084|   7.6998|   0.0000|   0.0000|   0.0000|  19.2732
    The gradient of the cost functions is 0.1383003
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        160|   0.4293|   2.4377|   0.0086|   6.1152|   0.0000|   0.0000|   0.0000|  20.2584
    The gradient of the cost functions is 0.038444586
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        170|   0.5616|   2.4281|   0.0087|   5.8257|   0.0000|   0.0000|   0.0000|  20.4413
    The gradient of the cost functions is 0.18903205
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        180|   0.4030|   2.1688|   0.0087|   5.5776|   0.0000|   0.0000|   0.0000|  20.5341
    The gradient of the cost functions is 0.108853504
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        190|   0.2012|   1.7315|   0.0089|   4.7043|   0.0000|   0.0000|   0.0000|  20.9312
    The gradient of the cost functions is 0.025811834
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        200|   0.2664|   1.7224|   0.0089|   4.5391|   0.0000|   0.0000|   0.0000|  20.9959
    Applying low pass filter to wind field...
    Done! Time = 267.0
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|559642.2500|   0.0000|   0.0091|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 43.085587
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10|1749.9775|  11.5556|   0.0093|   3.1306|   0.0000|   0.0000|   0.0000|  14.5070
    The gradient of the cost functions is 4.6896577
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|1137.2308|  12.8649|   0.0093|   3.2926|   0.0000|   0.0000|   0.0000|  14.2361
    The gradient of the cost functions is 6.3044558
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|   2.9881|  12.4682|   0.0093|   3.2075|   0.0000|   0.0000|   0.0000|  14.5336
    The gradient of the cost functions is 0.23147261
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|   0.2791|  12.4197|   0.0093|   3.2057|   0.0000|   0.0000|   0.0000|  14.5405
    The gradient of the cost functions is 0.102958694
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50|   0.3197|  12.2683|   0.0093|   3.2062|   0.0000|   0.0000|   0.0000|  14.5278
    The gradient of the cost functions is 0.8344458
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60|   0.3998|  11.4562|   0.0093|   3.2103|   0.0000|   0.0000|   0.0000|  14.4570
    The gradient of the cost functions is 0.22998074
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70|   0.5988|  10.1893|   0.0093|   3.2253|   0.0000|   0.0000|   0.0000|  14.3264
    The gradient of the cost functions is 0.13649559
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         80|   0.9579|   9.6588|   0.0093|   3.2293|   0.0000|   0.0000|   0.0000|  14.2695
    The gradient of the cost functions is 1.1096873
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         90|   1.4194|   7.8094|   0.0093|   3.2453|   0.0000|   0.0000|   0.0000|  14.1845
    The gradient of the cost functions is 0.5622433
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        100|   0.4597|   4.6916|   0.0093|   3.3586|   0.0000|   0.0000|   0.0000|  14.9792
    The gradient of the cost functions is 0.09190905
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        110|   0.3639|   4.5901|   0.0093|   3.3930|   0.0000|   0.0000|   0.0000|  15.1395
    The gradient of the cost functions is 0.15870957
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        120|   0.0040|   4.5883|   0.0093|   3.3888|   0.0000|   0.0000|   0.0000|  15.1114
    Applying low pass filter to wind field...
    Done! Time = 160.7






|

.. code-block:: default


    import pydda
    import pyart
    import cartopy.crs as ccrs
    import matplotlib.pyplot as plt


    berr_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR0)
    cpol_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR1)

    # Load our radar data
    sounding = pyart.io.read_arm_sonde(pydda.tests.SOUNDING_PATH)
    berr_grid = pydda.initialization.make_constant_wind_field(berr_grid, (0.0, 0.0, 0.0))

    # Let's provide an initial state from the sounding
    u_back = sounding[1].u_wind
    v_back = sounding[1].v_wind
    z_back = sounding[1].height
    cpol_grid = pydda.initialization.make_wind_field_from_profile(cpol_grid, sounding[1])

    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Co=1.0,
        Cm=64.0,
        frz=5000.0,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.1,
        engine="tensorflow",
    )
    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()

    # Let's see what happens when we use a zero initialization
    # This causes there to be convergence in the cone of silence
    # This is an artifact that we want to avoid!
    # Prescribing winds inside the background through either a constraint
    # Or through the initial state will help mitigate this issue.
    cpol_grid = pydda.initialization.make_constant_wind_field(cpol_grid, (0.0, 0.0, 0.0))
    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Co=1.0,
        Cm=64.0,
        frz=5000.0,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.5,
        engine="tensorflow",
    )

    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()

    # Or, let's make the radar data more important!
    cpol_grid = pydda.initialization.make_wind_field_from_profile(cpol_grid, sounding[1])
    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        Co=10.0,
        Cm=64.0,
        frz=5000.0,
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.1,
        engine="tensorflow",
    )
    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (12 minutes 24.447 seconds)


.. _sphx_glr_download_source_auto_examples_plot_fun_with_constraints.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fun_with_constraints.py <plot_fun_with_constraints.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fun_with_constraints.ipynb <plot_fun_with_constraints.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
