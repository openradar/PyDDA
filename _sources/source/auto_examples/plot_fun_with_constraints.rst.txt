
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source/auto_examples/plot_fun_with_constraints.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_source_auto_examples_plot_fun_with_constraints.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_auto_examples_plot_fun_with_constraints.py:


Example on geographic plotting and constraint variation
-------------------------------------------------------

In this example we show how to plot wind fields on a map and change
the default constraint coefficients using PyDDA.

This shows how important it is to have the proper intitial state and
constraints when you derive your wind fields. In the first figure,
the sounding was used as the initial state, but for the latter
two examples we use a zero initial state which provides for more
questionable winds at the edges of the Dual Doppler Lobes.

This shows that your initial state and background are key to
providing a physically realistic retrieval. Assuming a zero
background will likely result in false regions of convergence
and divergence that will generate artificial updrafts and downdrafts
at the edges of data coverage.

.. GENERATED FROM PYTHON SOURCE LINES 21-118



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_001.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_002.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_003.png
         :alt: PyDDA retreived winds @10.0 km south of origin.
         :srcset: /source/auto_examples/images/sphx_glr_plot_fun_with_constraints_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/pydda-docs/lib/python3.11/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_min not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    /usr/share/miniconda3/envs/pydda-docs/lib/python3.11/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_max not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|55964.2227|   0.0000|   0.0091|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 28.303705
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 432.8462|  11.1627|   0.0092|   3.1005|   0.0000|   0.0000|   0.0000|  14.7407
    The gradient of the cost functions is 0.9376439
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|   7.6007|  13.1735|   0.0093|   3.1935|   0.0000|   0.0000|   0.0000|  14.5022
    The gradient of the cost functions is 0.11323309
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|   4.6622|  14.1369|   0.0093|   3.1998|   0.0000|   0.0000|   0.0000|  14.5800
    The gradient of the cost functions is 0.09369536
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|   0.1739|  13.9019|   0.0093|   3.2020|   0.0000|   0.0000|   0.0000|  14.6887
    The gradient of the cost functions is 0.094281875
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50|   0.1741|  13.9024|   0.0093|   3.2020|   0.0000|   0.0000|   0.0000|  14.6888
    Applying low pass filter to wind field...
    Done! Time = 82.4
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|83859.8125|   0.0000|   0.0000|1274.4282|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 31.810278
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 704.6689|  11.4735|   0.0003|1271.5618|   0.0000|   0.0000|   0.0000|  11.8528
    The gradient of the cost functions is 1.1951996
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|  11.2450|  13.2237|   0.0003|1262.6641|   0.0000|   0.0000|   0.0000|  11.6571
    The gradient of the cost functions is 0.3364081
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|  20.1776|  14.2810|   0.0004|1241.5120|   0.0000|   0.0000|   0.0000|  11.4477
    The gradient of the cost functions is 2.3294988
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|  68.8079|  22.5259|   0.0004|1116.9188|   0.0000|   0.0000|   0.0000|  12.9644
    The gradient of the cost functions is 5.0930557
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50| 444.8738| 371.8791|   0.0077| 139.0789|   0.0000|   0.0000|   0.0000|  55.7124
    The gradient of the cost functions is 4.2041383
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60| 498.5228| 424.4142|   0.0089| 100.4293|   0.0000|   0.0000|   0.0000|  60.1515
    The gradient of the cost functions is 4.205406
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70| 498.5184| 424.4102|   0.0089| 100.4319|   0.0000|   0.0000|   0.0000|  60.1511
    Applying low pass filter to wind field...
    Done! Time = 104.5
    Interpolating sounding to radar grid
    Interpolated U field:
    tf.Tensor(
    [  0.60573435   1.0229144    6.434673    11.977132    12.919597
       9.719978    14.212554    17.673002     9.373551     4.932108
       7.0470777    4.581866     3.8447456    1.9784147   -2.7835784
      -4.8090096   -8.388001    -8.310871    -6.199968    -8.8743305
      -7.5828705   -6.553336    -7.493186    -8.902025   -11.6616335
     -13.175965   -15.263804   -16.580751   -17.48236    -23.17236
     -20.712376   -18.823587   -16.356308   -25.138748   -29.280111
     -28.940443   -19.437548   -10.714591    -9.689518  ], shape=(39,), dtype=float32)
    Interpolated V field:
    tf.Tensor(
    [-6.9235525  -6.326603   -6.434671   -6.9149985  -6.5828586  -3.927123
     -6.6274214  -8.241055   -9.051932   -3.2364333   0.8652741  -1.430016
      0.54577833 -1.4374017  -0.30149823  3.5418017   4.45998     5.19321
      5.667021    7.446448   10.062807   10.487528   11.109102   10.993081
      9.54446    11.055948    9.912431   11.183857    9.295537    2.4355142
     -0.723292   -1.9784379   1.1915643   5.803736    3.5951443  -2.0237138
      2.7317686   6.437976    2.7784247 ], shape=(39,), dtype=float32)
    Grid levels:
    [ 1000.  1500.  2000.  2500.  3000.  3500.  4000.  4500.  5000.  5500.
      6000.  6500.  7000.  7500.  8000.  8500.  9000.  9500. 10000. 10500.
     11000. 11500. 12000. 12500. 13000. 13500. 14000. 14500. 15000. 15500.
     16000. 16500. 17000. 17500. 18000. 18500. 19000. 19500. 20000.]
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2) / (2 * Re * slantr))
    Calculating weights for radars 0 and 1
    Calculating weights for radars 1 and 0
    Calculating weights for models...
    Points from Radar 0: 40597
    Points from Radar 1: 40597
    Starting solver 
    rmsVR = 6.827304
    Total points: 81194
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|559642.2500|   0.0000|   0.0091|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 43.09404
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10|1749.6165|  11.6008|   0.0093|   3.1307|   0.0000|   0.0000|   0.0000|  14.5148
    The gradient of the cost functions is 4.6926384
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|1139.2798|  13.0755|   0.0093|   3.2927|   0.0000|   0.0000|   0.0000|  14.2558
    The gradient of the cost functions is 6.3104076
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30|   2.9948|  12.6783|   0.0093|   3.2075|   0.0000|   0.0000|   0.0000|  14.5561
    The gradient of the cost functions is 0.23219287
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40|   0.2801|  12.7296|   0.0093|   3.2055|   0.0000|   0.0000|   0.0000|  14.5717
    The gradient of the cost functions is 0.13308749
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50|   0.2299|  12.7749|   0.0093|   3.2056|   0.0000|   0.0000|   0.0000|  14.5745
    The gradient of the cost functions is 0.09270921
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60|   0.2298|  12.7692|   0.0093|   3.2056|   0.0000|   0.0000|   0.0000|  14.5750
    The gradient of the cost functions is 0.09270603
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70|   0.2298|  12.7692|   0.0093|   3.2056|   0.0000|   0.0000|   0.0000|  14.5750
    Applying low pass filter to wind field...
    Done! Time = 106.8






|

.. code-block:: default


    import pydda
    import pyart
    import cartopy.crs as ccrs
    import matplotlib.pyplot as plt


    berr_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR0)
    cpol_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR1)

    # Load our radar data
    sounding = pyart.io.read_arm_sonde(pydda.tests.SOUNDING_PATH)
    berr_grid = pydda.initialization.make_constant_wind_field(berr_grid, (0.0, 0.0, 0.0))

    # Let's provide an initial state from the sounding
    u_back = sounding[1].u_wind
    v_back = sounding[1].v_wind
    z_back = sounding[1].height
    cpol_grid = pydda.initialization.make_wind_field_from_profile(cpol_grid, sounding[1])

    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Co=1.0,
        Cm=64.0,
        frz=5000.0,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.1,
        engine="tensorflow",
    )
    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()

    # Let's see what happens when we use a zero initialization
    # This causes there to be convergence in the cone of silence
    # This is an artifact that we want to avoid!
    # Prescribing winds inside the background through either a constraint
    # Or through the initial state will help mitigate this issue.
    cpol_grid = pydda.initialization.make_constant_wind_field(cpol_grid, (0.0, 0.0, 0.0))
    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Co=1.0,
        Cm=64.0,
        frz=5000.0,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.5,
        engine="tensorflow",
    )

    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()

    # Or, let's make the radar data more important!
    cpol_grid = pydda.initialization.make_wind_field_from_profile(cpol_grid, sounding[1])
    new_grids, _ = pydda.retrieval.get_dd_wind_field(
        [cpol_grid, berr_grid],
        Co=10.0,
        Cm=64.0,
        frz=5000.0,
        u_back=u_back,
        v_back=v_back,
        z_back=z_back,
        Cb=1e-5,
        Cx=1e2,
        Cy=1e2,
        Cz=1e2,
        mask_outside_opt=False,
        wind_tol=0.1,
        engine="tensorflow",
    )
    fig = plt.figure(figsize=(7, 7))

    pydda.vis.plot_xz_xsection_streamlines(
        new_grids, bg_grid_no=-1, level=50, w_vel_contours=[1, 3, 5, 8]
    )
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (4 minutes 57.106 seconds)


.. _sphx_glr_download_source_auto_examples_plot_fun_with_constraints.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fun_with_constraints.py <plot_fun_with_constraints.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fun_with_constraints.ipynb <plot_fun_with_constraints.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
