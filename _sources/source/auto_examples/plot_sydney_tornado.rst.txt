
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source/auto_examples/plot_sydney_tornado.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_source_auto_examples_plot_sydney_tornado.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_auto_examples_plot_sydney_tornado.py:


Example of a wind retrieval in a tornado over Sydney
----------------------------------------------------

This shows an example of how to retrieve winds from 4 radars over Sydney.

We use smoothing to decrease the magnitude of the updraft in the region of
the mesocyclone. The reduction of noise also helps the solution converge
much faster since the cost function is smoother and therefore less susecptible
to find a local minimum that is in noise.

The observational constraint is reduced to 0.01 from the usual 1because we are factoring in
many more data points as we are using 4 radars instead of the two in the Darwin example.

This example uses pooch to download the data files.

.. image:: ../../sydney_tornado.png

.. GENERATED FROM PYTHON SOURCE LINES 21-68



.. image-sg:: /source/auto_examples/images/sphx_glr_plot_sydney_tornado_001.png
   :alt: PyDDA retreived winds @4.383 km
   :srcset: /source/auto_examples/images/sphx_glr_plot_sydney_tornado_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/pydda-docs/lib/python3.11/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_min not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    /usr/share/miniconda3/envs/pydda-docs/lib/python3.11/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_max not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    Calculating weights for radars 0 and 1
    Calculating weights for radars 0 and 2
    Calculating weights for radars 0 and 3
    Calculating weights for radars 1 and 0
    Calculating weights for radars 1 and 2
    Calculating weights for radars 1 and 3
    Calculating weights for radars 2 and 0
    Calculating weights for radars 2 and 1
    Calculating weights for radars 2 and 3
    Calculating weights for radars 3 and 0
    Calculating weights for radars 3 and 1
    Calculating weights for radars 3 and 2
    Calculating weights for models...
    Starting solver 
    rmsVR = 7.242250167336596
    Total points: 281276
    The max of w_init is 0.0
    No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|2864.7900|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 0.5753010145055387
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10| 487.3236|  27.0467|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   7.5290
    /home/runner/work/PyDDA/PyDDA/pydda/retrieval/wind_retrieve.py:484: RuntimeWarning: All-NaN slice encountered
      delta = np.nanmax(diff)
    Max change in w:  nan
    The gradient of the cost functions is 0.3196080952213296
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20| 264.6357|  24.2828|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  10.1181
    The gradient of the cost functions is 0.27984898686514137
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         30| 241.4635|  23.0494|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  10.6345
    The gradient of the cost functions is 0.27985379130816934
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         40| 241.4635|  23.0494|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  10.6345
    Max change in w:  nan
    The gradient of the cost functions is 0.8482792841710158
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         50| 242.1883|  20.9507|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  10.3168
    Max change in w:  nan
    The gradient of the cost functions is 0.14334497127729234
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         60| 225.4447|  16.4656|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   9.7028
    Max change in w:  nan
    The gradient of the cost functions is 0.12608622303894243
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         70| 208.0925|  14.6111|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  10.8253
    The gradient of the cost functions is 0.08355310693560879
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         80| 193.7388|  14.7644|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3436
    The gradient of the cost functions is 0.0892863062806901
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         90| 193.7343|  14.7665|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3438
    The gradient of the cost functions is 0.08547671160352914
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        100| 193.7427|  14.7551|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3443
    Max change in w:  nan
    The gradient of the cost functions is 0.07559055183506301
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        110| 193.7427|  14.7551|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3443
    The gradient of the cost functions is 0.07559083473887696
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        120| 193.7427|  14.7551|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3443
    The gradient of the cost functions is 0.05746838675187186
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        130| 193.7643|  14.7371|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3439
    The gradient of the cost functions is 0.07448210413236746
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        140| 193.7447|  14.7530|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3443
    The gradient of the cost functions is 0.07442746039595546
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        150| 193.7448|  14.7530|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3443
    The gradient of the cost functions is 0.07448210709225016
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
        160| 193.7447|  14.7530|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|  11.3443
    Applying low pass filter to wind field...
    Done! Time = 383.2






|

.. code-block:: default


    import pyart
    import pydda
    import matplotlib.pyplot as plt
    import numpy as np
    import pooch

    grid1_path = pooch.retrieve(
        url="https://github.com/rcjackson/pydda-sample-data/raw/main/pydda-sample-data/grid1_sydney.nc",
        known_hash=None)
    grid2_path = pooch.retrieve(
        url="https://github.com/rcjackson/pydda-sample-data/raw/main/pydda-sample-data/grid2_sydney.nc",
        known_hash=None)
    grid3_path = pooch.retrieve(
        url="https://github.com/rcjackson/pydda-sample-data/raw/main/pydda-sample-data/grid3_sydney.nc",
        known_hash=None)
    grid4_path = pooch.retrieve(
        url="https://github.com/rcjackson/pydda-sample-data/raw/main/pydda-sample-data/grid4_sydney.nc",
        known_hash=None)
    grid1 = pyart.io.read_grid(grid1_path)
    grid2 = pyart.io.read_grid(grid2_path)
    grid3 = pyart.io.read_grid(grid3_path)
    grid4 = pyart.io.read_grid(grid4_path)

    # Set initialization and do retrieval
    grid1 = pydda.initialization.make_constant_wind_field(grid1, vel_field='VRADH_corr')
    new_grids, _ = pydda.retrieval.get_dd_wind_field([grid1, grid2, grid3, grid4],
                                                     Co=1e-2, Cm=256.0, Cx=1e-4, Cy=1e-4,
                                                     Cz=1e-4,
                                                     vel_name='VRADH_corr', refl_field='DBZH', 
                                                     mask_outside_opt=True, wind_tol=0.1,
                                                     max_iterations=200,
                                                     engine='jax')
    # Make a neat plot
    fig = plt.figure(figsize=(10,7))
    ax = pydda.vis.plot_horiz_xsection_quiver_map(new_grids, background_field='DBZH', level=3,
                                                  show_lobes=False, bg_grid_no=3, vmin=0, vmax=60,
                                                  quiverkey_len=20.0, w_vel_contours=[5., 10., 20, 30., 40.],
                                                  quiver_spacing_x_km=2.0, quiver_spacing_y_km=2.0,
                                                  quiverkey_loc='top', colorbar_contour_flag=True,
                                                  cmap='pyart_HomeyerRainbow')
    ax.set_xticks(np.arange(150.5, 153, 0.1))
    ax.set_yticks(np.arange(-36, -32.0, 0.1))
    ax.set_xlim([151.0, 151.35])
    ax.set_ylim([-34.15, -33.9])
    plt.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  37.728 seconds)


.. _sphx_glr_download_source_auto_examples_plot_sydney_tornado.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sydney_tornado.py <plot_sydney_tornado.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sydney_tornado.ipynb <plot_sydney_tornado.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
