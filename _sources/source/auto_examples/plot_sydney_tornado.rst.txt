
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "source/auto_examples/plot_sydney_tornado.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_source_auto_examples_plot_sydney_tornado.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_auto_examples_plot_sydney_tornado.py:


Example of a wind retrieval in a tornado over Sydney
----------------------------------------------------

This shows an example of how to retrieve winds from 4 radars over Sydney.

We use smoothing to decrease the magnitude of the updraft in the region of
the mesocyclone. The reduction of noise also helps the solution converge
much faster since the cost function is smoother and therefore less susecptible
to find a local minimum that is in noise.

The observational constraint is reduced to 0.01 from the usual 1because we are factoring in
many more data points as we are using 4 radars instead of the two in the Darwin example.

This example uses pooch to download the data files.

.. image:: ../../sydney_tornado.png

.. GENERATED FROM PYTHON SOURCE LINES 21-66



.. image-sg:: /source/auto_examples/images/sphx_glr_plot_sydney_tornado_001.png
   :alt: PyDDA retreived winds @4.383 km
   :srcset: /source/auto_examples/images/sphx_glr_plot_sydney_tornado_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/pydda-docs/lib/python3.10/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_min not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    /usr/share/miniconda3/envs/pydda-docs/lib/python3.10/site-packages/pyart/io/cfradial.py:408: UserWarning: WARNING: valid_max not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    Calculating weights for radars 0 and 1
    Calculating weights for radars 0 and 2
    Calculating weights for radars 0 and 3
    Calculating weights for radars 1 and 2
    Calculating weights for radars 1 and 3
    Calculating weights for radars 2 and 3
    Calculating weights for models...
    Starting solver 
    rmsVR = 6.566297
    Total points: 173398
    The max of w_init is 0.0
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
          0|1739.2842|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000|   0.0000
    The gradient of the cost functions is 0.14342529
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         10|  32.7141|  50.6668|   0.0021|   0.0000|   0.0000|   0.0000|   0.0000|  24.8819
    The gradient of the cost functions is 0.049719088
    Nfeval | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel  | Jpoint  | Max w  
         20|  25.3526|  30.0023|   0.0040|   0.0000|   0.0000|   0.0000|   0.0000|  73.6514
    Iterations before filter: 10
    Applying low pass filter to wind field...
    Done! Time = 61.2






|

.. code-block:: default


    import pyart
    import pydda
    import matplotlib.pyplot as plt
    import numpy as np
    import pooch

    grid1_path = pooch.retrieve(
        url="https://github.com/rcjackson/pydda-sample-data/raw/main/pydda-sample-data/grid1_sydney.nc",
        known_hash=None)
    grid2_path = pooch.retrieve(
        url="https://github.com/rcjackson/pydda-sample-data/raw/main/pydda-sample-data/grid2_sydney.nc",
        known_hash=None)
    grid3_path = pooch.retrieve(
        url="https://github.com/rcjackson/pydda-sample-data/raw/main/pydda-sample-data/grid3_sydney.nc",
        known_hash=None)
    grid4_path = pooch.retrieve(
        url="https://github.com/rcjackson/pydda-sample-data/raw/main/pydda-sample-data/grid4_sydney.nc",
        known_hash=None)
    grid1 = pyart.io.read_grid(grid1_path)
    grid2 = pyart.io.read_grid(grid2_path)
    grid3 = pyart.io.read_grid(grid3_path)
    grid4 = pyart.io.read_grid(grid4_path)

    # Set initialization and do retrieval
    u_init, v_init, w_init = pydda.initialization.make_constant_wind_field(grid1, vel_field='VRADH_corr')
    new_grids = pydda.retrieval.get_dd_wind_field([grid1, grid2, grid3, grid4],
                                                  u_init, v_init, w_init, Co=1e-2, Cm=256.0, Cx=1e3, Cy=1e3, Cz=1e3,
                                                  vel_name='VRADH_corr', refl_field='DBZH', 
                                                  mask_outside_opt=True, wind_tol=0.1,
                                                  engine='tensorflow')
    # Make a neat plot
    fig = plt.figure(figsize=(10,7))
    ax = pydda.vis.plot_horiz_xsection_quiver_map(new_grids, background_field='DBZH', level=3,
                                                  show_lobes=False, bg_grid_no=3, vmin=0, vmax=60,
                                                  quiverkey_len=20.0, w_vel_contours=[5., 10., 20, 30., 40.],
                                                  quiver_spacing_x_km=2.0, quiver_spacing_y_km=2.0,
                                                  quiverkey_loc='top', colorbar_contour_flag=True,
                                                  cmap='pyart_HomeyerRainbow')
    ax.set_xticks(np.arange(150.5, 153, 0.1))
    ax.set_yticks(np.arange(-36, -32.0, 0.1))
    ax.set_xlim([151.0, 151.35])
    ax.set_ylim([-34.15, -33.9])
    plt.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.483 seconds)


.. _sphx_glr_download_source_auto_examples_plot_sydney_tornado.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sydney_tornado.py <plot_sydney_tornado.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sydney_tornado.ipynb <plot_sydney_tornado.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
